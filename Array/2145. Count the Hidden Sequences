class Solution {
public:
    int numberOfArrays(vector<int>& differences, int lower, int upper) {
        long long prefix = 0;
        long long min_prefix = 0, max_prefix = 0;

        for (int diff : differences) {
            prefix += diff;
            min_prefix = min(min_prefix, prefix);
            max_prefix = max(max_prefix, prefix);
        }

        long long min_x = lower - min_prefix;
        long long max_x = upper - max_prefix;

        return max(0LL,max_x - min_x + 1);
    }
};


class Solution:
    def numberOfArrays(self, differences, lower, upper):
        # These will track the min and max of prefix sums as we go
        min_prefix = 0
        max_prefix = 0
        current = 0  # Current prefix sum

        # Calculate the prefix sum values
        # and track the min and max seen so far
        for diff in differences:
            current += diff
            min_prefix = min(min_prefix, current)
            max_prefix = max(max_prefix, current)

        # Compute the valid range for the first number x
        # So that x + all prefix values are within [lower, upper]
        min_x = lower - min_prefix
        max_x = upper - max_prefix

        # Count how many integers are in [min_x, max_x]
        # Result must be ≥ 0)
        return max(0, max_x - min_x + 1)

Part 1: Generate the Valid Sequences
We already know that valid starting values for hidden[0] are:
x in [3, 4]
Now, let’s generate the full sequences using those values.

Step-by-step logic to generate the array:
Given:
differences = [1, -3, 4]
We generate the array like this:

hidden[0] = x
hidden[1] = x + differences[0]
hidden[2] = hidden[1] + differences[1]
hidden[3] = hidden[2] + differences[2]
Let’s plug in the values:

🔹 When x = 3:
hidden[0] = 3
hidden[1] = 3 + 1 = 4
hidden[2] = 4 - 3 = 1
hidden[3] = 1 + 4 = 5
Sequence: [3, 4, 1, 5] → All in range [1, 6] → ✅ Valid

🔹 When x = 4:
hidden[0] = 4
hidden[1] = 4 + 1 = 5
hidden[2] = 5 - 3 = 2
hidden[3] = 2 + 4 = 6
Sequence: [4, 5, 2, 6] → All in range [1, 6] → ✅ Valid

🔹 If x = 2 or x = 5?
Let’s test:
x = 2 → Sequence = [2, 3, 0, 4] → ❌ 0 is below lower bound
x = 5 → Sequence = [5, 6, 3, 7] → ❌ 7 is above upper bound

Part 2: Visualization — How x shifts the sequence
Here's how x shifts the sequence:
Sequence = [x, x+1, x-2, x+2]
So:
It keeps the shape (same differences)
It just moves up/down based on the starting value x

Here's a cool table:
x	Sequence	Valid?
2	[2, 3, 0, 4]	❌ No (0 too small)
3	[3, 4, 1, 5]	✅ Yes
4	[4, 5, 2, 6]	✅ Yes
5	[5, 6, 3, 7]	❌ No (7 too large)

Summary
You can pick any x such that:
lower - min_prefix ≤ x ≤ upper - max_prefix
Each x gives you one possible valid sequence.

In this case, only x = 3 and x = 4 work, so the answer is 2.
Valid sequences are:
[3, 4, 1, 5]
[4, 5, 2, 6]
