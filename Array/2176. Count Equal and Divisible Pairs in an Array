class Solution {
public:
    int countPairs(vector<int>& nums, int k) {
        int n = nums.size();
        int count =0;
        for (int i=0; i<n-1; i++){
            for (int j=i+1; j<n; j++){
                if(nums[i]==nums[j]){
                    int chk = i*j;
                    int chk_ans = chk%k;
                    if(chk_ans==0) count++;
                }
            }
        }
        return count;
    }
};

Avg case TC of this soln (O(n) for grouping +O(n) for checking pairs= O(n)) is better than brute force O(n2)
class Solution {
public:
    int countPairs(vector<int>& nums, int k) {
        int n = nums.size();
        int count = 0;
        unordered_map<int, vector<int>> val; 

        for (int i = 0; i < n; i++) {
            val[nums[i]].push_back(i);
        }

        for (auto& pair : val) {
            vector<int>& indices = pair.second;
            int grpsize = indices.size();

            for (int i = 0; i < grpsize; i++) {
                for (int j = i + 1; j < grpsize; j++) {
                    if ((indices[i] * indices[j]) % k == 0) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
};

For- 
nums = [3,1,2,2,2,1,3]
k = 2

val looks like - 
{
    3: [0, 6],
    1: [1, 5],
    2: [2, 3, 4]
}

On each iteration:
pair.first is the value (e.g. 3)
pair.second is the list of indices for that value

Example:
For value 3, indices = [0, 6], grpsize = 2
For value 1, indices = [1, 5], grpsize = 2
For value 2, indices = [2, 3, 4], grpsize = 3

Loop through all index pairs (i, j) such that i < j in each group.

For value 3: [0, 6]
Pair: (0,6) → 0 * 6 = 0 % 2 == 0 ✅ → count = 1

For value 1: [1, 5]
Pair: (1,5) → 1 * 5 = 5 % 2 == 1 ❌ → not counted

For value 2: [2, 3, 4]
Pair: (2,3) → 6 % 2 == 0 ✅ → count = 2
Pair: (2,4) → 8 % 2 == 0 ✅ → count = 3
Pair: (3,4) → 12 % 2 == 0 ✅ → count = 4
