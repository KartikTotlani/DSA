Time complexity - O(N^2)
class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n,0);  //expression vector<int> res(n, 0) initializes the result vector res with n elements, all set to 0.
        for (int i=0; i<n; i++){
            int count=0;
            for(int j=0; j<n; j++){
                if(nums[i] > nums[j]) count++;
            }
            res[i] = count;
        }
        return res;
    }
};

class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        res = []
        for i in range(len(nums)):
            count =0
            for j in range(len(nums)):
                if(nums[i] > nums[j]): count +=1
            res.append(count)
        return res


Time Complexity - O(N logn)
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        temp = sorted(nums)
        d ={}
        for i,num in enumerate(temp):
            if num not in d:
                d[num]=i
        res =[]
        for i in nums:
            res.append(d[i])
        return res

C++
class Solution {
public:
    // Function to find the count of numbers smaller than each number in the nums array
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        // Step 1: Get the size of the input vector
        int n = nums.size();
        
        // Step 2: Create a copy of nums and sort it
        vector<int> temp = nums;  // temp will store the sorted version of nums
        sort(temp.begin(), temp.end());  // Sort the array in ascending order
        
        // Step 3: Create a map to store the first occurrence of each element in the sorted array
        unordered_map<int, int> d;  // The map will store the element as the key, and the index as the value
        
        // Step 4: Populate the map with the index of each element in the sorted array
        for (int i = 0; i < n; i++) {
            // If the element is not already in the map, add it along with its index (position in the sorted array)
            if (d.find(temp[i]) == d.end()) {
                d[temp[i]] = i;  // For each unique element, store its index in the sorted array
            }
        }
        
        // Step 5: Create a result vector to store the count of smaller numbers for each element in nums
        vector<int> res;
        
        // Step 6: For each element in the original array, look up its count of smaller elements in the map
        for (int i = 0; i < n; i++) {
            // Push the count (index) from the map to the result vector
            res.push_back(d[nums[i]]);
        }
        
        // Step 7: Return the final result
        return res;
    }
};


Letâ€™s walk through an example where nums = [8, 1, 2, 2, 3].

Step 1 - Create temp:
temp = [8, 1, 2, 2, 3] (a copy of nums).

Step 2 - Sort temp:
temp becomes [1, 2, 2, 3, 8].

Step 3 - Populate the map d:
Insert 1: 0, 2: 1, 3: 3, and 8: 4 into d.

Step 4 - Process nums and fill the result:
For nums[0] = 8, we look up d[8] = 4. So, res = [4].
For nums[1] = 1, we look up d[1] = 0. So, res = [4, 0].
For nums[2] = 2, we look up d[2] = 1. So, res = [4, 0, 1].
For nums[3] = 2, we look up d[2] = 1. So, res = [4, 0, 1, 1].
For nums[4] = 3, we look up d[3] = 3. So, res = [4, 0, 1, 1, 3].

Step 5 - Return the result:
res = [4, 0, 1, 1, 3] is returned.
