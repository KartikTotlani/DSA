class Solution:
    def minTimeToVisitAllPoints(self, points: List[List[int]]) -> int:
#dist between two pts is the max difference betn one of the coordinates (x or y)
#say a pt is 10units aways on x-axis and 5units on y-axis it will take us 10units as we can move only one x or y at a time or diagonally (as when moving all diagonally as well we reach a pt from where we need to move either horizontally or vertically strt)

        res =0
        x1, y1 = points.pop()
        while points:
            x2, y2 = points.pop()
            res = res + max(abs(x2-x1), abs(y2-y1))
            x1,y1 = x2,y2
        return res 


class Solution {
public:
    int minTimeToVisitAllPoints(vector<vector<int>>& points) {
        int res =0;
        int x1 = points.back()[0];
        int y1 = points.back()[1];
        points.pop_back();

        while(!points.empty()){
            int x2 = points.back()[0];
            int y2 = points.back()[1];
            points.pop_back();

            res += max(abs(x2 - x1), abs(y2 - y1));
            x1 = x2;
            y1 = y2;
        }
        return res;
    }
};
//points.empty() to check if the vector is empty and back() to access the last element of the vector.
//points.back() would give you the last element in the vector, which is [7, 8] 
//points.back()[0] would give you the x-coordinate of that point, which is 7.
//points.back()[1] would give you the y-coordinate of that point, which is 8.


class Solution {
public:
    int minTimeToVisitAllPoints(vector<vector<int>>& points) {
       int ans = 0;
        for (int i = 0; i < points.size() - 1; i++) {
            int currX = points[i][0];
            int currY = points[i][1];
            int targetX = points[i + 1][0];
            int targetY = points[i + 1][1];
            ans += max(abs(targetX - currX), abs(targetY - currY));
        }
        
        return ans;
    }
};
