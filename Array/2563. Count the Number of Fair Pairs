TC - O(n2) -- TLE
class Solution {
public:
    long long countFairPairs(vector<int>& nums, int lower, int upper) {
        int n = nums.size();
        int count =0;
        //lower <= nums[i] + nums[j] <= upper
        for (int i=0; i<n-1; i++){
            for(int j=i+1; j<n; j++){
                int chk = nums[i] + nums[j];
                if(lower <= chk && chk <= upper) count++;
            }
        } 
        return count;
    }
};

TC - O(N logn)
class Solution {
public:
    long long countFairPairs(vector<int>& nums, int lower, int upper) {
        sort(nums.begin(), nums.end());
        //nums = [0,1,4,4,5,7]
        int n = nums.size();
        long long count =0;

        //lower <= nums[i] + nums[j] <= upper
        for (int i=0; i<n-1; i++){
            //create window
            //convert the range condition to a condition on nums[j]
            // We're looking for: lower - nums[i] <= nums[j] <= upper - nums[i]
            int left = lower - nums[i];
            int right = upper - nums[i];
            //left = 3, right = 6

// Use binary search to find how many nums[j] (j > i) fall in [left, right]
// lower_bound gives the first position where nums[j] >= left
// upper_bound gives the first position where nums[j] > right

//[l, r) is the valid range
            int l = lower_bound(nums.begin() + i + 1, nums.end(), left) - nums.begin();
            int r = upper_bound(nums.begin() + i + 1, nums.end(), right) - nums.begin();

// Add the count of valid j's for current i
            count += r - l;
        } 
        return count;
    }
};


Python -
class Solution:
    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:
        nums.sort()
        count =0
        
        for i in range(len(nums)):
            left = lower - nums[i]
            right = upper - nums[i]

            l = bisect_left(nums, left, i + 1)
            r = bisect_right(nums, right, i + 1)

            count += r - l
        return count


nums = [0,1,7,4,4,5]
lower = 3
upper = 6

First, we sort `nums`:
nums = [0, 1, 4, 4, 5, 7]

We are looking for **"fair pairs"** — pairs `(i, j)` such that:
- `i < j`  
- `lower <= nums[i] + nums[j] <= upper`

So, we want to count **how many pairs of numbers add up to a sum between 3 and 6** (inclusive), and make sure `i < j`.

## How the code works:

For each element `nums[i]`, we want to find how many `nums[j]` **after** it (`j > i`) satisfy:
lower <= nums[i] + nums[j] <= upper

Rewriting this:
lower - nums[i] <= nums[j] <= upper - nums[i]

So for each `i`, you're just looking for how many values in `nums[j]` (where `j > i`) lie within that range. Since the array is sorted, we can binary search that range efficiently.

bisect_left and bisect_right

We use `bisect_left(nums, value, i + 1)` and `bisect_right(nums, value, i + 1)` to find the count of elements in `nums[i+1:]` that fall into this range.


## Let's walk through the example:
Sorted `nums = [0, 1, 4, 4, 5, 7]`  
`lower = 3`, `upper = 6`

We'll loop through each index `i`:

### i = 0, nums[i] = 0  
We're looking for values of `nums[j]` such that:

3 - 0 <= nums[j] <= 6 - 0
=> 3 <= nums[j] <= 6


So, count elements in `[1:]` in range [3, 6] → `[4, 4, 5]` → **3 elements**
`count = 3`

### i = 1, nums[i] = 1  
Target range:  
3 - 1 <= nums[j] <= 6 - 1
=> 2 <= nums[j] <= 5

`nums[2:] = [4, 4, 5, 7]`  
→ `[4, 4, 5]` → **3 elements**

`count = 3 + 3 = 6`

### i = 2, nums[i] = 4  
Target range:
3 - 4 <= nums[j] <= 6 - 4
=> -1 <= nums[j] <= 2

`nums[3:] = [4, 5, 7]` → No values in range → **0 elements**

`count = 6`

---

### i = 3, nums[i] = 4 (again)  
Same range: -1 to 2  
`nums[4:] = [5, 7]` → No values in range

`count = 6`

---

### i = 4, nums[i] = 5  
Range:  
```
3 - 5 <= nums[j] <= 6 - 5
=> -2 <= nums[j] <= 1
```

`nums[5:] = [7]` → No values in range

`count = 6`

---

### i = 5, nums[i] = 7  
Nothing after index 5 → skip

Final `count = 6`

---

## Final Output: `6`

Fair pairs are (indices):  
- (0, 2), (0, 3), (0, 4), (1, 2), (1, 3), (1, 4)  
→ Corresponding to values:  
- (0,4), (0,4), (0,5), (1,4), (1,4), (1,5)

(Note: Even if the same number appears multiple times, they're different positions, so they count as separate valid pairs.)
